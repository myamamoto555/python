: bennett todd @ salomon brothers inc. , ny 
subject : re : source random bit unix workstation 
lines : 44 
: sandstorm 
application , encrypt real-time clock 
value secret key . 
well , almost ... solve problem , 
willing type second password secret key whenever 
log , could work . 
however , try create solution 
anyone use , , install , effortless start 
use 1 control access . 
get 
problem store secret key multiuser computer . 
> good discussion cryptographically `` good '' random number 
> generator , check . 
txt 
> internet draft , available local friendly internet draft 
> repository . 
thanks pointer ! 
good reading , like idea use 
several unrelated source strong mixing function . 
however , unless 
miss something , source suggest aside hardware rng 
seem available , intruder , unix 
, buffer relate network traffic . 
believe 
solution basically use strategy , without require reach 
kernel . 
> reasonably source randomness output cryptographic 
> hash function e.g. , md5 , feed large amount 
> more-or-less random datum . 
example , run md5 
> slow , random enough , source random bit ; bind 
> 128 bit entropy ten hundred megabyte datum 
> modern workstation 's memory , fair amount system 
> timer , buffer , etc. . 
hear solution , sound good . 
hear folk 
experience time 30-60 seconds run , 
workstation . 
willing add much delay 
someone 's login process . 
approach | compress , skip 10k take 
second two run . 
consider write 
solution , launch md5 , simultaneously try suck bit 
net , net sit __ __ idle get 10k 
compression md5 finish , use md5 . 
way could 
guarantee good bit , deterministic upper bind login time , 
still common case login take couple extra seconds . 
- bennett 

